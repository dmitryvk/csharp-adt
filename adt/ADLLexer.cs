//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 ADL.g 2015-06-06 01:03:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  adt 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class ADLLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ASTERISK=4;
	public const int ATTRIBUTES=5;
	public const int CLOSE=6;
	public const int COMMA=7;
	public const int COMMENT=8;
	public const int COMMON_ATTRIBUTES=9;
	public const int DOT=10;
	public const int EQ=11;
	public const int ID=12;
	public const int ID_LETTER=13;
	public const int ID_START_LETTER=14;
	public const int NAMESPACE=15;
	public const int OPEN=16;
	public const int PIPE=17;
	public const int QUESTION=18;
	public const int QUOTED_TEXT=19;
	public const int SEMI=20;
	public const int WS=21;

	// delegates
	// delegators

	public ADLLexer()
	{
		OnCreated();
	}

	public ADLLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public ADLLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "ADL.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_QUOTED_TEXT();
	partial void LeaveRule_QUOTED_TEXT();

	// $ANTLR start "QUOTED_TEXT"
	[GrammarRule("QUOTED_TEXT")]
	private void mQUOTED_TEXT()
	{
		EnterRule_QUOTED_TEXT();
		EnterRule("QUOTED_TEXT", 1);
		TraceIn("QUOTED_TEXT", 1);
		try
		{
			int _type = QUOTED_TEXT;
			int _channel = DefaultTokenChannel;
			// ADL.g:84:5: ( '\"' ( options {greedy=false; } :~ '\"' )* '\"' )
			DebugEnterAlt(1);
			// ADL.g:84:7: '\"' ( options {greedy=false; } :~ '\"' )* '\"'
			{
			DebugLocation(84, 7);
			Match('\"'); 
			DebugLocation(84, 11);
			// ADL.g:84:11: ( options {greedy=false; } :~ '\"' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='\u0000' && LA1_1<='!')||(LA1_1>='#' && LA1_1<='\uFFFF')))
				{
					alt1 = 1;
				}
				else if ((LA1_1=='\"'))
				{
					alt1 = 2;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// ADL.g:84:41: ~ '\"'
					{
					DebugLocation(84, 41);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(84, 48);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("QUOTED_TEXT", 1);
			LeaveRule("QUOTED_TEXT", 1);
			LeaveRule_QUOTED_TEXT();
		}
	}
	// $ANTLR end "QUOTED_TEXT"

	partial void EnterRule_NAMESPACE();
	partial void LeaveRule_NAMESPACE();

	// $ANTLR start "NAMESPACE"
	[GrammarRule("NAMESPACE")]
	private void mNAMESPACE()
	{
		EnterRule_NAMESPACE();
		EnterRule("NAMESPACE", 2);
		TraceIn("NAMESPACE", 2);
		try
		{
			int _type = NAMESPACE;
			int _channel = DefaultTokenChannel;
			// ADL.g:86:10: ( '@namespace' )
			DebugEnterAlt(1);
			// ADL.g:86:12: '@namespace'
			{
			DebugLocation(86, 12);
			Match("@namespace"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NAMESPACE", 2);
			LeaveRule("NAMESPACE", 2);
			LeaveRule_NAMESPACE();
		}
	}
	// $ANTLR end "NAMESPACE"

	partial void EnterRule_ATTRIBUTES();
	partial void LeaveRule_ATTRIBUTES();

	// $ANTLR start "ATTRIBUTES"
	[GrammarRule("ATTRIBUTES")]
	private void mATTRIBUTES()
	{
		EnterRule_ATTRIBUTES();
		EnterRule("ATTRIBUTES", 3);
		TraceIn("ATTRIBUTES", 3);
		try
		{
			int _type = ATTRIBUTES;
			int _channel = DefaultTokenChannel;
			// ADL.g:88:11: ( '@attributes' )
			DebugEnterAlt(1);
			// ADL.g:88:13: '@attributes'
			{
			DebugLocation(88, 13);
			Match("@attributes"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ATTRIBUTES", 3);
			LeaveRule("ATTRIBUTES", 3);
			LeaveRule_ATTRIBUTES();
		}
	}
	// $ANTLR end "ATTRIBUTES"

	partial void EnterRule_COMMON_ATTRIBUTES();
	partial void LeaveRule_COMMON_ATTRIBUTES();

	// $ANTLR start "COMMON_ATTRIBUTES"
	[GrammarRule("COMMON_ATTRIBUTES")]
	private void mCOMMON_ATTRIBUTES()
	{
		EnterRule_COMMON_ATTRIBUTES();
		EnterRule("COMMON_ATTRIBUTES", 4);
		TraceIn("COMMON_ATTRIBUTES", 4);
		try
		{
			int _type = COMMON_ATTRIBUTES;
			int _channel = DefaultTokenChannel;
			// ADL.g:89:18: ( '@common_attributes' )
			DebugEnterAlt(1);
			// ADL.g:89:20: '@common_attributes'
			{
			DebugLocation(89, 20);
			Match("@common_attributes"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMON_ATTRIBUTES", 4);
			LeaveRule("COMMON_ATTRIBUTES", 4);
			LeaveRule_COMMON_ATTRIBUTES();
		}
	}
	// $ANTLR end "COMMON_ATTRIBUTES"

	partial void EnterRule_QUESTION();
	partial void LeaveRule_QUESTION();

	// $ANTLR start "QUESTION"
	[GrammarRule("QUESTION")]
	private void mQUESTION()
	{
		EnterRule_QUESTION();
		EnterRule("QUESTION", 5);
		TraceIn("QUESTION", 5);
		try
		{
			int _type = QUESTION;
			int _channel = DefaultTokenChannel;
			// ADL.g:91:9: ( '?' )
			DebugEnterAlt(1);
			// ADL.g:91:11: '?'
			{
			DebugLocation(91, 11);
			Match('?'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("QUESTION", 5);
			LeaveRule("QUESTION", 5);
			LeaveRule_QUESTION();
		}
	}
	// $ANTLR end "QUESTION"

	partial void EnterRule_ASTERISK();
	partial void LeaveRule_ASTERISK();

	// $ANTLR start "ASTERISK"
	[GrammarRule("ASTERISK")]
	private void mASTERISK()
	{
		EnterRule_ASTERISK();
		EnterRule("ASTERISK", 6);
		TraceIn("ASTERISK", 6);
		try
		{
			int _type = ASTERISK;
			int _channel = DefaultTokenChannel;
			// ADL.g:92:9: ( '*' )
			DebugEnterAlt(1);
			// ADL.g:92:11: '*'
			{
			DebugLocation(92, 11);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASTERISK", 6);
			LeaveRule("ASTERISK", 6);
			LeaveRule_ASTERISK();
		}
	}
	// $ANTLR end "ASTERISK"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 7);
		TraceIn("DOT", 7);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// ADL.g:94:5: ( '.' )
			DebugEnterAlt(1);
			// ADL.g:94:7: '.'
			{
			DebugLocation(94, 7);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 7);
			LeaveRule("DOT", 7);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_PIPE();
	partial void LeaveRule_PIPE();

	// $ANTLR start "PIPE"
	[GrammarRule("PIPE")]
	private void mPIPE()
	{
		EnterRule_PIPE();
		EnterRule("PIPE", 8);
		TraceIn("PIPE", 8);
		try
		{
			int _type = PIPE;
			int _channel = DefaultTokenChannel;
			// ADL.g:96:5: ( '|' )
			DebugEnterAlt(1);
			// ADL.g:96:7: '|'
			{
			DebugLocation(96, 7);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PIPE", 8);
			LeaveRule("PIPE", 8);
			LeaveRule_PIPE();
		}
	}
	// $ANTLR end "PIPE"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 9);
		TraceIn("SEMI", 9);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// ADL.g:98:5: ( ';' )
			DebugEnterAlt(1);
			// ADL.g:98:7: ';'
			{
			DebugLocation(98, 7);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 9);
			LeaveRule("SEMI", 9);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 10);
		TraceIn("WS", 10);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// ADL.g:100:5: ( ( ' ' | '\\t' | '\\r' '\\n' | '\\n' | '\\r' ) )
			DebugEnterAlt(1);
			// ADL.g:100:9: ( ' ' | '\\t' | '\\r' '\\n' | '\\n' | '\\r' )
			{
			DebugLocation(100, 9);
			// ADL.g:100:9: ( ' ' | '\\t' | '\\r' '\\n' | '\\n' | '\\r' )
			int alt2=5;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case ' ':
				{
				alt2 = 1;
				}
				break;
			case '\t':
				{
				alt2 = 2;
				}
				break;
			case '\r':
				{
				int LA2_2 = input.LA(2);

				if ((LA2_2=='\n'))
				{
					alt2 = 3;
				}
				else
				{
					alt2 = 5;
				}
				}
				break;
			case '\n':
				{
				alt2 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ADL.g:100:13: ' '
				{
				DebugLocation(100, 13);
				Match(' '); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ADL.g:101:13: '\\t'
				{
				DebugLocation(101, 13);
				Match('\t'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ADL.g:102:13: '\\r' '\\n'
				{
				DebugLocation(102, 13);
				Match('\r'); 
				DebugLocation(102, 18);
				Match('\n'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ADL.g:103:13: '\\n'
				{
				DebugLocation(103, 13);
				Match('\n'); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ADL.g:104:13: '\\r'
				{
				DebugLocation(104, 13);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(106, 9);
			Skip();

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 10);
			LeaveRule("WS", 10);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 11);
		TraceIn("COMMENT", 11);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// ADL.g:110:5: ( '/*' ( options {greedy=false; } : . )* '*/' | '//' (~ ( '\\r' | '\\n' ) )* ( '\\n' | ( '\\r' ( options {greedy=true; } : '\\n' )? ) ) )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1=='/'))
			{
				int LA7_2 = input.LA(2);

				if ((LA7_2=='*'))
				{
					alt7 = 1;
				}
				else if ((LA7_2=='/'))
				{
					alt7 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// ADL.g:110:7: '/*' ( options {greedy=false; } : . )* '*/'
				{
				DebugLocation(110, 7);
				Match("/*"); 

				DebugLocation(110, 12);
				// ADL.g:110:12: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_1 = input.LA(1);

					if ((LA3_1=='*'))
					{
						int LA3_2 = input.LA(2);

						if ((LA3_2=='/'))
						{
							alt3 = 2;
						}
						else if (((LA3_2>='\u0000' && LA3_2<='.')||(LA3_2>='0' && LA3_2<='\uFFFF')))
						{
							alt3 = 1;
						}


					}
					else if (((LA3_1>='\u0000' && LA3_1<=')')||(LA3_1>='+' && LA3_1<='\uFFFF')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch ( alt3 )
					{
					case 1:
						DebugEnterAlt(1);
						// ADL.g:110:39: .
						{
						DebugLocation(110, 39);
						MatchAny(); 

						}
						break;

					default:
						goto loop3;
					}
				}

				loop3:
					;

				} finally { DebugExitSubRule(3); }

				DebugLocation(110, 43);
				Match("*/"); 

				DebugLocation(110, 48);
				 Skip(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ADL.g:111:7: '//' (~ ( '\\r' | '\\n' ) )* ( '\\n' | ( '\\r' ( options {greedy=true; } : '\\n' )? ) )
				{
				DebugLocation(111, 7);
				Match("//"); 

				DebugLocation(111, 12);
				// ADL.g:111:12: (~ ( '\\r' | '\\n' ) )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_1 = input.LA(1);

					if (((LA4_1>='\u0000' && LA4_1<='\t')||(LA4_1>='\u000B' && LA4_1<='\f')||(LA4_1>='\u000E' && LA4_1<='\uFFFF')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// ADL.g:
						{
						DebugLocation(111, 12);
						input.Consume();


						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(111, 28);
				// ADL.g:111:28: ( '\\n' | ( '\\r' ( options {greedy=true; } : '\\n' )? ) )
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1=='\n'))
				{
					alt6 = 1;
				}
				else if ((LA6_1=='\r'))
				{
					alt6 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// ADL.g:111:29: '\\n'
					{
					DebugLocation(111, 29);
					Match('\n'); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ADL.g:111:36: ( '\\r' ( options {greedy=true; } : '\\n' )? )
					{
					DebugLocation(111, 36);
					// ADL.g:111:36: ( '\\r' ( options {greedy=true; } : '\\n' )? )
					DebugEnterAlt(1);
					// ADL.g:111:37: '\\r' ( options {greedy=true; } : '\\n' )?
					{
					DebugLocation(111, 37);
					Match('\r'); 
					DebugLocation(111, 42);
					// ADL.g:111:42: ( options {greedy=true; } : '\\n' )?
					int alt5=2;
					try { DebugEnterSubRule(5);
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if ((LA5_1=='\n'))
					{
						alt5 = 1;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// ADL.g:111:65: '\\n'
						{
						DebugLocation(111, 65);
						Match('\n'); 

						}
						break;

					}
					} finally { DebugExitSubRule(5); }


					}


					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(111, 74);
				 Skip(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 11);
			LeaveRule("COMMENT", 11);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 12);
		TraceIn("ID", 12);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// ADL.g:114:5: ( ID_START_LETTER ( ID_LETTER )* )
			DebugEnterAlt(1);
			// ADL.g:114:7: ID_START_LETTER ( ID_LETTER )*
			{
			DebugLocation(114, 7);
			mID_START_LETTER(); 
			DebugLocation(114, 23);
			// ADL.g:114:23: ( ID_LETTER )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1=='$'||(LA8_1>='0' && LA8_1<='9')||(LA8_1>='A' && LA8_1<='Z')||LA8_1=='_'||(LA8_1>='a' && LA8_1<='z')||(LA8_1>='\u0080' && LA8_1<='\uFFFE')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// ADL.g:
					{
					DebugLocation(114, 23);
					input.Consume();


					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 12);
			LeaveRule("ID", 12);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_EQ();
	partial void LeaveRule_EQ();

	// $ANTLR start "EQ"
	[GrammarRule("EQ")]
	private void mEQ()
	{
		EnterRule_EQ();
		EnterRule("EQ", 13);
		TraceIn("EQ", 13);
		try
		{
			int _type = EQ;
			int _channel = DefaultTokenChannel;
			// ADL.g:117:4: ( '=' )
			DebugEnterAlt(1);
			// ADL.g:117:6: '='
			{
			DebugLocation(117, 6);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQ", 13);
			LeaveRule("EQ", 13);
			LeaveRule_EQ();
		}
	}
	// $ANTLR end "EQ"

	partial void EnterRule_OPEN();
	partial void LeaveRule_OPEN();

	// $ANTLR start "OPEN"
	[GrammarRule("OPEN")]
	private void mOPEN()
	{
		EnterRule_OPEN();
		EnterRule("OPEN", 14);
		TraceIn("OPEN", 14);
		try
		{
			int _type = OPEN;
			int _channel = DefaultTokenChannel;
			// ADL.g:119:5: ( '(' )
			DebugEnterAlt(1);
			// ADL.g:119:7: '('
			{
			DebugLocation(119, 7);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPEN", 14);
			LeaveRule("OPEN", 14);
			LeaveRule_OPEN();
		}
	}
	// $ANTLR end "OPEN"

	partial void EnterRule_CLOSE();
	partial void LeaveRule_CLOSE();

	// $ANTLR start "CLOSE"
	[GrammarRule("CLOSE")]
	private void mCLOSE()
	{
		EnterRule_CLOSE();
		EnterRule("CLOSE", 15);
		TraceIn("CLOSE", 15);
		try
		{
			int _type = CLOSE;
			int _channel = DefaultTokenChannel;
			// ADL.g:120:6: ( ')' )
			DebugEnterAlt(1);
			// ADL.g:120:8: ')'
			{
			DebugLocation(120, 8);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLOSE", 15);
			LeaveRule("CLOSE", 15);
			LeaveRule_CLOSE();
		}
	}
	// $ANTLR end "CLOSE"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 16);
		TraceIn("COMMA", 16);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// ADL.g:122:6: ( ',' )
			DebugEnterAlt(1);
			// ADL.g:122:8: ','
			{
			DebugLocation(122, 8);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 16);
			LeaveRule("COMMA", 16);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_ID_START_LETTER();
	partial void LeaveRule_ID_START_LETTER();

	// $ANTLR start "ID_START_LETTER"
	[GrammarRule("ID_START_LETTER")]
	private void mID_START_LETTER()
	{
		EnterRule_ID_START_LETTER();
		EnterRule("ID_START_LETTER", 17);
		TraceIn("ID_START_LETTER", 17);
		try
		{
			// ADL.g:127:5: ( '_' | '$' | 'a' .. 'z' | 'A' .. 'Z' | '\\u0080' .. '\\ufffe' )
			DebugEnterAlt(1);
			// ADL.g:
			{
			DebugLocation(127, 5);
			if (input.LA(1)=='$'||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u0080' && input.LA(1)<='\uFFFE'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("ID_START_LETTER", 17);
			LeaveRule("ID_START_LETTER", 17);
			LeaveRule_ID_START_LETTER();
		}
	}
	// $ANTLR end "ID_START_LETTER"

	partial void EnterRule_ID_LETTER();
	partial void LeaveRule_ID_LETTER();

	// $ANTLR start "ID_LETTER"
	[GrammarRule("ID_LETTER")]
	private void mID_LETTER()
	{
		EnterRule_ID_LETTER();
		EnterRule("ID_LETTER", 18);
		TraceIn("ID_LETTER", 18);
		try
		{
			// ADL.g:136:5: ( ID_START_LETTER | '0' .. '9' )
			DebugEnterAlt(1);
			// ADL.g:
			{
			DebugLocation(136, 5);
			if (input.LA(1)=='$'||(input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u0080' && input.LA(1)<='\uFFFE'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("ID_LETTER", 18);
			LeaveRule("ID_LETTER", 18);
			LeaveRule_ID_LETTER();
		}
	}
	// $ANTLR end "ID_LETTER"

	public override void mTokens()
	{
		// ADL.g:1:8: ( QUOTED_TEXT | NAMESPACE | ATTRIBUTES | COMMON_ATTRIBUTES | QUESTION | ASTERISK | DOT | PIPE | SEMI | WS | COMMENT | ID | EQ | OPEN | CLOSE | COMMA )
		int alt9=16;
		try { DebugEnterDecision(9, false);
		int LA9_1 = input.LA(1);

		if ((LA9_1=='\"'))
		{
			alt9 = 1;
		}
		else if ((LA9_1=='@'))
		{
			switch (input.LA(2))
			{
			case 'n':
				{
				alt9 = 2;
				}
				break;
			case 'a':
				{
				alt9 = 3;
				}
				break;
			case 'c':
				{
				alt9 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

		}
		else if ((LA9_1=='?'))
		{
			alt9 = 5;
		}
		else if ((LA9_1=='*'))
		{
			alt9 = 6;
		}
		else if ((LA9_1=='.'))
		{
			alt9 = 7;
		}
		else if ((LA9_1=='|'))
		{
			alt9 = 8;
		}
		else if ((LA9_1==';'))
		{
			alt9 = 9;
		}
		else if (((LA9_1>='\t' && LA9_1<='\n')||LA9_1=='\r'||LA9_1==' '))
		{
			alt9 = 10;
		}
		else if ((LA9_1=='/'))
		{
			alt9 = 11;
		}
		else if ((LA9_1=='$'||(LA9_1>='A' && LA9_1<='Z')||LA9_1=='_'||(LA9_1>='a' && LA9_1<='z')||(LA9_1>='\u0080' && LA9_1<='\uFFFE')))
		{
			alt9 = 12;
		}
		else if ((LA9_1=='='))
		{
			alt9 = 13;
		}
		else if ((LA9_1=='('))
		{
			alt9 = 14;
		}
		else if ((LA9_1==')'))
		{
			alt9 = 15;
		}
		else if ((LA9_1==','))
		{
			alt9 = 16;
		}
		else
		{
			NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
			DebugRecognitionException(nvae);
			throw nvae;
		}
		} finally { DebugExitDecision(9); }
		switch (alt9)
		{
		case 1:
			DebugEnterAlt(1);
			// ADL.g:1:10: QUOTED_TEXT
			{
			DebugLocation(1, 10);
			mQUOTED_TEXT(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// ADL.g:1:22: NAMESPACE
			{
			DebugLocation(1, 22);
			mNAMESPACE(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// ADL.g:1:32: ATTRIBUTES
			{
			DebugLocation(1, 32);
			mATTRIBUTES(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// ADL.g:1:43: COMMON_ATTRIBUTES
			{
			DebugLocation(1, 43);
			mCOMMON_ATTRIBUTES(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// ADL.g:1:61: QUESTION
			{
			DebugLocation(1, 61);
			mQUESTION(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// ADL.g:1:70: ASTERISK
			{
			DebugLocation(1, 70);
			mASTERISK(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// ADL.g:1:79: DOT
			{
			DebugLocation(1, 79);
			mDOT(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// ADL.g:1:83: PIPE
			{
			DebugLocation(1, 83);
			mPIPE(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// ADL.g:1:88: SEMI
			{
			DebugLocation(1, 88);
			mSEMI(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// ADL.g:1:93: WS
			{
			DebugLocation(1, 93);
			mWS(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// ADL.g:1:96: COMMENT
			{
			DebugLocation(1, 96);
			mCOMMENT(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// ADL.g:1:104: ID
			{
			DebugLocation(1, 104);
			mID(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// ADL.g:1:107: EQ
			{
			DebugLocation(1, 107);
			mEQ(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// ADL.g:1:110: OPEN
			{
			DebugLocation(1, 110);
			mOPEN(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// ADL.g:1:115: CLOSE
			{
			DebugLocation(1, 115);
			mCLOSE(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// ADL.g:1:121: COMMA
			{
			DebugLocation(1, 121);
			mCOMMA(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

	#endregion

}

} // namespace  adt 
